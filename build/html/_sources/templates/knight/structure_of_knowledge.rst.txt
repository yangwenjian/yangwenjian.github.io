


====================================================
System Structure of Knowledge
====================================================
Building a system Structure of Knowledge can help me to store the Knowledge I have and make me aware of what to learn the next step.

所有的问题都可以划分为若干简单的问题，解决复杂问题就是分而治之的思想，因此，我所要掌握的，就是：
良好的基础+分解问题的能力。

.. code::

    编程语言不同，但设计类似
    框架不同，但会体现出同样的设计模式
    开发人员不同，但与人打交道的规则一致

Introduction
====================================================
知识体系是我最近才意识到的比较关键性的问题，没有这个，知识就会乱放，你也不知道你会什么，新的知识也不知道该存放到哪里。
就和计算机的存储结构一样，个人的知识体系也是一个金子塔结构，我们最常用的当然放在我们的寄存器中，依次是L1 Cache，L2 Cache，L3 Cache，内存，硬盘，外部存储。
也好像文件系统一样，我们需要指针指向我们某块知识存储，如何管理整个知识系统，删除过时的，及时存储新的。
如果真能像数据库一般形成永久性存储，并能快速定位，那真是记忆力的极致了。

How to Store My Knowledge
====================================================
当你学习了一项新的知识或者技能，你会相当自豪，你也许会多多练习，或应用的实际的日常工作中，这样你就会记得很捞，如果持续使用，可能就会记住很久，并能能产生很多高深的领会，产生更高级的知识和技能，就像你玩游戏中的技能树一样。
其实，知识在你脑中，也是一刻知识数，越细越高深，越向指头发展，越容易开花。
类似于我们学过的树形结构，我们每学习一项，就存储到我们的知识树中，并调整知识数使其保持平衡，像调整算法吧^-^。

The  System Structure of Knowledge
====================================================
* 理论
    * 数学（《数学分析》、《具体数学》、《离散数学》、《数理逻辑》）
        * 数学分析
        * 离散数学
        * 数理逻辑
    * 形式语言与自动机（Automata，《形式语言与自动机》）
    * 集合理论（Geometry）
* 硬件（《Computer Architecture: A Quantitative Approach》、《CSAPP》）
    * 计算机组成原理：计算机组成部件、CPU时间片、存储体系、IO接口、总线技术
    * 计算机体系结构：多处理机、流水技术、指令调度
    * 计算机微机原理：一种处理机的具体结构、引脚作用
    * 数字电路：逻辑门电路、触发器、组合电路设计
* 机器语言编程(CSAPP)
    * 汇编程序设计（Assembly）
    * 可执行文件格式
    * 链接与加载（Linking and Loading）
* 操作系统（《现代操作系统》、《操作系统实现》）
    * 进程与线程、协程理论
    * 段页式内存管理
    * 文件系统
    * IO管理
    * 内核与驱动
* 程序设计基础（《The Art of Computer Programming》）
    * 数据结构（《数据结构与算法分析》）
    * 算法
        * 算法分析（《算法分析》）
        * 算法设计（《算法设计》）
* 程序设计语言
    * 编译原理（《编译原理》）
    * C语言-精通
    * C++/Java-熟练
    * C#/F#-了解
    * Python/Perl/Shell/JavaScrip-掌握其一
* 编程框架和库
    * 平台程序开发
        * Windows程序设计（《Programming Windows》）
        * Linux/Unix系统编程（《Advanced Programming》）
        * 跨平台程序设计
    * 程序库
        * C++：STL/Boost/MFC
        * 跨平台：GTK/wxWidgets/Qt
        * Perl：CPAN
* 程序设计与软件工程
    * UML设计（《深入浅出设计模式》、《Thinking in UML》、《The Unified Modeling Language User Guide》）
    * 敏捷、统一过程、迭代方法
    * 调试和测试方法
* 应用
    * 计算机网络（《计算机网络》）
    * 数据库（《数据库系统概念》、《数据库系统实现》）
    * WEB应用
    * 并行开发Concurrent Programming
    * 分布式系统Distributed System
* 计算机系统
    * 指令
    * 内存管理


.. image:: images/personal_knowlege.jpg
