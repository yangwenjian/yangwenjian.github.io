


==========================================
Openstack Base Prototype Design
==========================================

运维管理系统NeunnManager
==========================================

资源管理页面设计
-----------------------------------------
管理员对整个云资源进行管理，资源管理界面的基础设计如下：

分为五个标签，分别是资源申请，资源管理，资源监控，租户管理，系统配置。

资源申请：查看待处理的申请，进行审批或者拒绝，查看审批记录。

.. image:: images/resource_management_admin_application.jpg

资源管理：查看所有资源的使用和分配情况，对主机进行可用域划分，收回等。

.. image:: images/resource_management_admin_control.jpg

资源监控：对于所有资源的监控，将未利用的资源下电。

.. image:: images/resource_management_admin_monitor.jpg

租户管理： 对于所有租户的增删改查，以及对于每个租户配额的管理。

.. image:: images/resource_management_admin_tenant.jpg

最后经过base组的讨论，得出如下结论：

运营管理分为四大块，分别为租户管理，资源管理，合同管理，容量管理。

+-----------------------+----------------------------------------+
|       项目            |       内容                             |
+=======================+========================================+
|                       | - 用户列表                             |
| 租户管理              | - 合同列表                             |   
|                       | - 可用域列表                           |
|                       | - 配额                                 |
+-----------------------+----------------------------------------+
|                       | - 服务器类型列表                       |
|                       | - 可用域管理                           |
| 资源管理              | - 计算节点管理                         |
+-----------------------+----------------------------------------+
|                       | - 合同列表                             |
|                       | - 合同扫描件                           |
| 合同管理              | - 合同内容                             |
+-----------------------+----------------------------------------+
|                       | - 可用域容量管理                       |
| 容量管理              | - 计算节点容量管理                     |
|                       | - cpu容量管理                          |
|                       | - 内存容量管理                         |
|                       | - EBS容量管理                          |
|                       | - IP容量管理                           |
|                       | - 带宽容量管理                         |
+-----------------------+----------------------------------------+


**资源管理分为AZ管理和计算节点管理。**

AZ管理包括AZ列表，表项目为：

+-----------------------+-----------------------+---------------------------+---------------------------+
| name                  | available state       | hosts (node linke)        | metadata                  |
+=======================+=======================+===========================+===========================+
| nova                  | true                  | node1                     | 保留                      |
+-----------------------+-----------------------+---------------------------+---------------------------+

计算节点管理包括计算节点类表，表项目为：

+---------------+----------------+-----------------------+---------------+-----------------------+---------------+---------------+---------------+
| name          | free state     | availability zone     | ip            | configuration         | power         | metadata      |  action       |
+===============+================+=======================+===============+=======================+===============+===============+===============+
| node1         | true           | null                  | 192.168.1.2   | 32cpus,128G mem,      | off           | save          |  *action*     |
+---------------+----------------+-----------------------+---------------+-----------------------+---------------+---------------+---------------+
| node2         | false          | nova                  | 192.168.1.3   | 32cpus,128G mem,      | on            | save          |  *action*     |
+---------------+----------------+-----------------------+---------------+-----------------------+---------------+---------------+---------------+

action包括如下几项操作：

*添加到可用域*  
*从可用域释放*  
*手动上电*  
*手动下电*  
*强制重启*  

Base层-统一云计算平台设计
========================================

Base层操作日志设计
----------------------------------------
Base层建立基本完成后，需要进行用户操作日志系统的设计，这里为了保持代码不动和高可维护性，采用Spring AOP框架进行日志系统的代码构建，具体采用Spring自带AOP接口进行AOP的实现。

表单设计
----------------------------------------
用户的每一条动作，进行详细记录。


+-----------+----------------+-----------------------+------------------+-----------------+---------------+---------------+---------------+
| 序号      | 用户           | 所属租户              | 时间             | 操作            | 参数          | 结果          |  原因         |
+===========+================+=======================+==================+=================+===============+===============+===============+
| 1         | user1          | tenant1               | 2014.10.10 12:00 | 查询云主机      | id:           | 成功          |  无           |
+-----------+----------------+-----------------------+------------------+-----------------+---------------+---------------+---------------+
| 2         | user2          | tenant2               | 2014.10.11 13:00 | 创建云主机      | flavor:       | 失败          |  资源不足     |
+-----------+----------------+-----------------------+------------------+-----------------+---------------+---------------+---------------+
