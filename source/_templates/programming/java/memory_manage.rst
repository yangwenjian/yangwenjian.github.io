


==========================================
Memory Management
==========================================

Java的内存回收机制
==========================================
JVM有自己的内存回收机制，也就是我们熟悉的引用计数（reference counting）方法。
每当有一个引用指向heap中某个对象的时候，引用计数就加一；反之，则减一。
当有任何对象的引用计数为0的时候，立即清理该对象。

对于那些自引用或者两个对象互引用的，JVM也能及时清理掉。

其实JVM使用一种更高效的内存清理办法，就是从Stack区和Static区去遍历引用，对每个引用及其指向对象的所有成员进行遍历，这些都是活动的对象。
而那些没有被遍历到的，就是不活动的对象，JVM就会对其进行清理。

最佳实践
==========================================
虽然JAVA中有强大的GC进行内存的清理与回收，但是这个周期是比较长的，而且在使用Tomcat的过程中经常出现OutOfMemory，OutOfPergemSpace这样类似的错误，比较头疼。

在内存不够的情况下也有可能造成程序本身的错误，在Neunn Base层的编写中，这里创建了大量对象，必须相应的调大Tomcat的内存配置，否则就会出现上述的各种问题。
这里是这样修改：

::

 JAVA_OPTS="$JAVA_OPTS -XX:PermSize=5120m -XX:MaxPermSize=10240m -Dfile.encoding=UTF-8 -Dsun.jnu.encoding=UTF-8"

PermSapce主要是用来存储Java的类型信息的元数据，如果大量的创建对象，这个存储区域就会溢出，造成Tomcat崩溃，影响程序运行。
